import React from 'react';
import 'keen-slider/keen-slider.min.css';
import {useKeenSlider, TrackDetails} from 'keen-slider/react'; // import from 'keen-slider/react.es' for to get an ES module
import './Slider.css';

import {PolygonjsScene} from '@polygonjs/react';
import {loadSceneAsync_scene_01} from '../polygonjs/scenes/scene_01/autogenerated/loadSceneAsync';
import {PolySceneWithNodeMap_scene_01} from '../polygonjs/scenes/scene_01/autogenerated/PolySceneWithNodeMap';
import {loadSceneAsync_scene_02} from '../polygonjs/scenes/scene_02/autogenerated/loadSceneAsync';
import {loadSceneAsync_scene_03} from '../polygonjs/scenes/scene_03/autogenerated/loadSceneAsync';
import {PolySceneWithNodeMap_scene_02} from '../polygonjs/scenes/scene_02/autogenerated/PolySceneWithNodeMap';
import {PolySceneWithNodeMap_scene_03} from '../polygonjs/scenes/scene_03/autogenerated/PolySceneWithNodeMap';

function onSceneReady_01(scene: PolySceneWithNodeMap_scene_01) {
	// console.log('onSceneReady 01', scene.name());
}
function onSceneReady_02(scene: PolySceneWithNodeMap_scene_02) {
	// console.log('onSceneReady 02', scene.name());
}
function onSceneReady_03(scene: PolySceneWithNodeMap_scene_03) {
	// console.log('onSceneReady 03', scene.name());
}

export const Slider = () => {
	const [details, setDetails] = React.useState<TrackDetails | null>(null);
	const [refCallback, slider] = useKeenSlider(
		{
			loop: true,
			slideChanged() {
				// console.log('slide changed');
			},
			detailsChanged(s) {
				// when the slides move,
				// we currently need to trigger a scroll event
				// to tell polygonjs to update cached canvas dimensions
				// which will then allow it to detect the cursor position correctly
				document.dispatchEvent(new Event('scroll'));
				setDetails(s.track.details);
			},
		},
		[
			// add plugins here
		]
	);
	function scaleStyle(idx: number) {
		if (!details) return {};
		const slide = details.slides[idx];
		const scale_size = 0.7;
		const scale = 1 - (scale_size - scale_size * slide.portion);
		return {
			willChange: 'transform',
			transform: `scale(${scale})`,
			WebkitTransform: `scale(${scale})`,
		};
	}
	function renderState(idx: number): boolean {
		if (!details) return true;
		const slide = details.slides[idx];
		return slide.portion != 0;
	}

	return (
		<div ref={refCallback} className="keen-slider">
			<div className="keen-slider__slide">
				<div className="keen-slider__slide_content" style={scaleStyle(0)}>
					<PolygonjsScene
						key="scene_01"
						sceneName="scene_01"
						loadFunction={loadSceneAsync_scene_01}
						onSceneReady={onSceneReady_01}
						render={renderState(0)}
					/>
				</div>
			</div>
			<div className="keen-slider__slide">
				<div className="keen-slider__slide_content" style={scaleStyle(1)}>
					<PolygonjsScene
						key="scene_02"
						sceneName="scene_02"
						loadFunction={loadSceneAsync_scene_02}
						onSceneReady={onSceneReady_02}
						render={renderState(1)}
					/>
				</div>
			</div>
			<div className="keen-slider__slide">
				<div className="keen-slider__slide_content" style={scaleStyle(2)}>
					<PolygonjsScene
						key="scene_03"
						sceneName="scene_03"
						loadFunction={loadSceneAsync_scene_03}
						onSceneReady={onSceneReady_03}
						render={renderState(2)}
					/>
				</div>
			</div>
		</div>
	);
};
