import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { CopNetworkObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/CopNetwork";
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
import { PerspectiveCameraObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PerspectiveCamera";
// cop
import { EnvMapCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/EnvMap";
import { ImageEXRCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/ImageEXR";
// sop
import { ActorSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Actor";
import { BoxSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Box";
import { CameraControlsSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CameraControls";
import { CameraFrameModeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CameraFrameMode";
import { CopySopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Copy";
import { CsgNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CsgNetwork";
import { EventsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/EventsNetwork";
import { FaceSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Face";
import { FileGLTFSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/FileGLTF";
import { HemisphereLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/HemisphereLight";
import { HierarchySopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Hierarchy";
import { MaterialSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Material";
import { MaterialsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/MaterialsNetwork";
import { MergeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Merge";
import { NormalsSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Normals";
import { NullSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Null";
import { ObjectPropertiesSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/ObjectProperties";
import { PerspectiveCameraSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PerspectiveCamera";
import { PolarTransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PolarTransform";
import { PostProcessNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PostProcessNetwork";
import { SpotLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/SpotLight";
// mat
import { MeshStandardBuilderMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandardBuilder";
import { MeshStandardMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandard";
// csg
import { ExpandCsgNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/csg/Expand";
import { ExtrudeRectangularCsgNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/csg/ExtrudeRectangular";
import { RectangleCsgNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/csg/Rectangle";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";
// actor
import { AddActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/Add";
import { FloatToVec3ActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/FloatToVec3";
import { GetObjectPropertyActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/GetObjectProperty";
import { MultActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/Mult";
import { MultScalarActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/MultScalar";
import { OnTickActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/OnTick";
import { PlaneActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/Plane";
import { RayFromCursorActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/RayFromCursor";
import { RayIntersectPlaneActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/RayIntersectPlane";
import { SetObjectLookAtActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/SetObjectLookAt";
import { SetObjectPositionActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/SetObjectPosition";
import { SetObjectRotationActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/SetObjectRotation";
import { Vec3ToFloatActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/Vec3ToFloat";

export class PolySceneWithNodeMap_scene_03 extends PolyScene {
  node(path: "/COP"): CopNetworkObjNode;
  node(path: "/COP/envMap1"): EnvMapCopNode;
  node(path: "/COP/imageEXR1"): ImageEXRCopNode;
  node(path: "/bg"): GeoObjNode;
  node(path: "/bg/material1"): MaterialSopNode;
  node(path: "/bg/face1"): FaceSopNode;
  node(path: "/bg/normals1"): NormalsSopNode;
  node(path: "/bg/copy1"): CopySopNode;
  node(path: "/bg/merge1"): MergeSopNode;
  node(path: "/bg/MAT"): MaterialsNetworkSopNode;
  node(path: "/bg/MAT/meshStandardBuilder1"): MeshStandardBuilderMatNode;
  node(path: "/bg/csgNetwork1"): CsgNetworkSopNode;
  node(path: "/bg/csgNetwork1/rectangle1"): RectangleCsgNode;
  node(path: "/bg/csgNetwork1/expand1"): ExpandCsgNode;
  node(path: "/bg/csgNetwork1/extrudeRectangular1"): ExtrudeRectangularCsgNode;
  node(path: "/perspectiveCamera_MAIN"): PerspectiveCameraObjNode;
  node(
    path: "/perspectiveCamera_MAIN/postProcessNetwork1"
  ): PostProcessNetworkSopNode;
  node(path: "/perspectiveCamera_MAIN/events1"): EventsNetworkSopNode;
  node(
    path: "/perspectiveCamera_MAIN/events1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/perspectiveCamera_DEBUG"): PerspectiveCameraObjNode;
  node(
    path: "/perspectiveCamera_DEBUG/postProcessNetwork1"
  ): PostProcessNetworkSopNode;
  node(path: "/perspectiveCamera_DEBUG/events1"): EventsNetworkSopNode;
  node(
    path: "/perspectiveCamera_DEBUG/events1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/lights"): GeoObjNode;
  node(path: "/lights/hemisphereLight1"): HemisphereLightSopNode;
  node(path: "/lights/merge1"): MergeSopNode;
  node(path: "/lights/polarTransform1"): PolarTransformSopNode;
  node(path: "/lights/spotLight1"): SpotLightSopNode;
  node(path: "/camera"): GeoObjNode;
  node(path: "/camera/box1"): BoxSopNode;
  node(path: "/camera/cameraFrameMode1"): CameraFrameModeSopNode;
  node(path: "/camera/hierarchy1"): HierarchySopNode;
  node(path: "/camera/perspectiveCamera_MAIN"): PerspectiveCameraSopNode;
  node(path: "/camera/actor1"): ActorSopNode;
  node(path: "/camera/actor1/add1"): AddActorNode;
  node(path: "/camera/actor1/floatToVec3_2"): FloatToVec3ActorNode;
  node(path: "/camera/actor1/getObjectProperty1"): GetObjectPropertyActorNode;
  node(path: "/camera/actor1/mult1"): MultActorNode;
  node(path: "/camera/actor1/mult2"): MultActorNode;
  node(path: "/camera/actor1/multScalar1"): MultScalarActorNode;
  node(path: "/camera/actor1/onTick1"): OnTickActorNode;
  node(path: "/camera/actor1/plane1"): PlaneActorNode;
  node(path: "/camera/actor1/rayFromCursor1"): RayFromCursorActorNode;
  node(path: "/camera/actor1/rayIntersectPlane1"): RayIntersectPlaneActorNode;
  node(path: "/camera/actor1/setObjectLookAt1"): SetObjectLookAtActorNode;
  node(path: "/camera/actor1/setObjectPosition1"): SetObjectPositionActorNode;
  node(path: "/camera/actor1/setObjectRotation1"): SetObjectRotationActorNode;
  node(path: "/camera/actor1/vec3ToFloat1"): Vec3ToFloatActorNode;
  node(path: "/camera/actor1/vec3ToFloat2"): Vec3ToFloatActorNode;
  node(path: "/camera/cameraControls1"): CameraControlsSopNode;
  node(
    path: "/camera/cameraControls1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/rhino"): GeoObjNode;
  node(path: "/rhino/OUT"): NullSopNode;
  node(path: "/rhino/fileGLTF1"): FileGLTFSopNode;
  node(path: "/rhino/hierarchy1"): HierarchySopNode;
  node(path: "/rhino/material1"): MaterialSopNode;
  node(path: "/rhino/objectProperties1"): ObjectPropertiesSopNode;
  node(path: "/rhino/MAT"): MaterialsNetworkSopNode;
  node(path: "/rhino/MAT/meshStandard1"): MeshStandardMatNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_scene_03 {
  "COP-envMap1--useCameraRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--url"?: ParamValueSerializedTypeMap["string"];
  "COP-imageEXR1--reload"?: ParamValueSerializedTypeMap["button"];
  "COP-imageEXR1--tencoding"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--encoding"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--tmapping"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--mapping"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--twrap"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--wrapS"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--wrapT"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--tminFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--minFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--tmagFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--magFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--tanisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--useRendererMaxAnisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--anisotropy"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--tflipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--flipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--ttransform"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--offset"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEXR1--offset-offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--offset-offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--repeat"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEXR1--repeat-repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--repeat-repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--rotation"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--center"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEXR1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--centery"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEXR1--tadvanced"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--tformat"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--format"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--ttype"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEXR1--type"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEXR1--checkFileType"?: ParamValueSerializedTypeMap["boolean"];
  "bg--transform"?: ParamValueSerializedTypeMap["folder"];
  "bg--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "bg--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "bg--t"?: ParamValueSerializedTypeMap["vector3"];
  "bg--t-tx"?: ParamValueSerializedTypeMap["float"];
  "bg--t-ty"?: ParamValueSerializedTypeMap["float"];
  "bg--t-tz"?: ParamValueSerializedTypeMap["float"];
  "bg--tx"?: ParamValueSerializedTypeMap["float"];
  "bg--ty"?: ParamValueSerializedTypeMap["float"];
  "bg--tz"?: ParamValueSerializedTypeMap["float"];
  "bg--r"?: ParamValueSerializedTypeMap["vector3"];
  "bg--r-rx"?: ParamValueSerializedTypeMap["float"];
  "bg--r-ry"?: ParamValueSerializedTypeMap["float"];
  "bg--r-rz"?: ParamValueSerializedTypeMap["float"];
  "bg--rx"?: ParamValueSerializedTypeMap["float"];
  "bg--ry"?: ParamValueSerializedTypeMap["float"];
  "bg--rz"?: ParamValueSerializedTypeMap["float"];
  "bg--s"?: ParamValueSerializedTypeMap["vector3"];
  "bg--s-sx"?: ParamValueSerializedTypeMap["float"];
  "bg--s-sy"?: ParamValueSerializedTypeMap["float"];
  "bg--s-sz"?: ParamValueSerializedTypeMap["float"];
  "bg--sx"?: ParamValueSerializedTypeMap["float"];
  "bg--sy"?: ParamValueSerializedTypeMap["float"];
  "bg--sz"?: ParamValueSerializedTypeMap["float"];
  "bg--scale"?: ParamValueSerializedTypeMap["float"];
  "bg--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "bg--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "bg--display"?: ParamValueSerializedTypeMap["boolean"];
  "bg--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "bg-material1--group"?: ParamValueSerializedTypeMap["string"];
  "bg-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "bg-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "bg-material1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "bg-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "bg-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "bg-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "bg-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "bg-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "bg-face1--makeFacesUnique"?: ParamValueSerializedTypeMap["boolean"];
  "bg-face1--addFaceCenterAttribute"?: ParamValueSerializedTypeMap["boolean"];
  "bg-face1--addFaceId"?: ParamValueSerializedTypeMap["boolean"];
  "bg-face1--transform"?: ParamValueSerializedTypeMap["boolean"];
  "bg-face1--scale"?: ParamValueSerializedTypeMap["float"];
  "bg-normals1--edit"?: ParamValueSerializedTypeMap["boolean"];
  "bg-normals1--updateX"?: ParamValueSerializedTypeMap["boolean"];
  "bg-normals1--x"?: ParamValueSerializedTypeMap["float"];
  "bg-normals1--updateY"?: ParamValueSerializedTypeMap["boolean"];
  "bg-normals1--y"?: ParamValueSerializedTypeMap["float"];
  "bg-normals1--updateZ"?: ParamValueSerializedTypeMap["boolean"];
  "bg-normals1--z"?: ParamValueSerializedTypeMap["float"];
  "bg-normals1--recompute"?: ParamValueSerializedTypeMap["boolean"];
  "bg-normals1--invert"?: ParamValueSerializedTypeMap["boolean"];
  "bg-copy1--count"?: ParamValueSerializedTypeMap["integer"];
  "bg-copy1--t"?: ParamValueSerializedTypeMap["vector3"];
  "bg-copy1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--tx"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--ty"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--tz"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--r"?: ParamValueSerializedTypeMap["vector3"];
  "bg-copy1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--rx"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--ry"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--rz"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--s"?: ParamValueSerializedTypeMap["vector3"];
  "bg-copy1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--sx"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--sy"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--sz"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--scale"?: ParamValueSerializedTypeMap["float"];
  "bg-copy1--transformOnly"?: ParamValueSerializedTypeMap["boolean"];
  "bg-copy1--transformMode"?: ParamValueSerializedTypeMap["integer"];
  "bg-copy1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "bg-copy1--copyAttributes"?: ParamValueSerializedTypeMap["boolean"];
  "bg-copy1--attributesToCopy"?: ParamValueSerializedTypeMap["string"];
  "bg-copy1--useCopyExpr"?: ParamValueSerializedTypeMap["boolean"];
  "bg-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "bg-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "bg-MAT-meshStandardBuilder1--default"?: ParamValueSerializedTypeMap["folder"];
  "bg-MAT-meshStandardBuilder1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--opacity"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--textures"?: ParamValueSerializedTypeMap["folder"];
  "bg-MAT-meshStandardBuilder1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--map"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--emissive"?: ParamValueSerializedTypeMap["color"];
  "bg-MAT-meshStandardBuilder1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "bg-MAT-meshStandardBuilder1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "bg-MAT-meshStandardBuilder1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--metalness"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--roughness"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "bg-MAT-meshStandardBuilder1--setBuilderNode"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--builderNode"?: ParamValueSerializedTypeMap["node_path"];
  "bg-MAT-meshStandardBuilder1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--front"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--blending"?: ParamValueSerializedTypeMap["integer"];
  "bg-MAT-meshStandardBuilder1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "bg-MAT-meshStandardBuilder1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "bg-MAT-meshStandardBuilder1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--shadowPCSS"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--shadowPCSSFilterSize"?: ParamValueSerializedTypeMap["float"];
  "bg-MAT-meshStandardBuilder1--overrideCustomMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--createCustomMatDistance"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--createCustomMatDepth"?: ParamValueSerializedTypeMap["boolean"];
  "bg-MAT-meshStandardBuilder1--createCustomMatDepthDOF"?: ParamValueSerializedTypeMap["boolean"];
  "bg-csgNetwork1-rectangle1--center"?: ParamValueSerializedTypeMap["vector2"];
  "bg-csgNetwork1-rectangle1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--centerx"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--centery"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--size"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--sizes"?: ParamValueSerializedTypeMap["vector2"];
  "bg-csgNetwork1-rectangle1--sizes-sizesx"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--sizes-sizesy"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--sizesx"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--sizesy"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--rounded"?: ParamValueSerializedTypeMap["boolean"];
  "bg-csgNetwork1-rectangle1--roundedRadius"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-rectangle1--roundedSegments"?: ParamValueSerializedTypeMap["integer"];
  "bg-csgNetwork1-expand1--delta"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-expand1--corners"?: ParamValueSerializedTypeMap["integer"];
  "bg-csgNetwork1-expand1--segments"?: ParamValueSerializedTypeMap["integer"];
  "bg-csgNetwork1-extrudeRectangular1--size"?: ParamValueSerializedTypeMap["float"];
  "bg-csgNetwork1-extrudeRectangular1--height"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--transform"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera_MAIN--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_MAIN--t"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera_MAIN--t-tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--t-ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--t-tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--r"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera_MAIN--r-rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--r-ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--r-rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--s"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera_MAIN--s-sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--s-sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--s-sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--scale"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera_MAIN--camera"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera_MAIN--controls"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_MAIN--updateFromControlsMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_MAIN--near"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--far"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--display"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN--fov"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--frameMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_MAIN--expectedAspectRatio"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera_MAIN--layer"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_MAIN--render"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera_MAIN--setScene"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN--scene"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_MAIN--setRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN--renderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_MAIN--setCSSRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN--CSSRenderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_MAIN--doPostProcess"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN--postProcessNode"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_MAIN-postProcessNetwork1--prependRenderPass"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-postProcessNetwork1--depthBuffer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-postProcessNetwork1--stencilBuffer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-postProcessNetwork1--sampling"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_MAIN-postProcessNetwork1--tTextureType"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-postProcessNetwork1--textureType"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_MAIN-events1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--transform"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera_DEBUG--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_DEBUG--t"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera_DEBUG--t-tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--t-ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--t-tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--r"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera_DEBUG--r-rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--r-ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--r-rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--s"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera_DEBUG--s-sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--s-sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--s-sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--scale"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera_DEBUG--camera"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera_DEBUG--controls"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_DEBUG--updateFromControlsMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_DEBUG--near"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--far"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--display"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG--fov"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--frameMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_DEBUG--expectedAspectRatio"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera_DEBUG--layer"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_DEBUG--render"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera_DEBUG--setScene"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG--scene"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_DEBUG--setRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG--renderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_DEBUG--setCSSRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG--CSSRenderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_DEBUG--doPostProcess"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG--postProcessNode"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera_DEBUG-postProcessNetwork1--prependRenderPass"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-postProcessNetwork1--depthBuffer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-postProcessNetwork1--stencilBuffer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-postProcessNetwork1--sampling"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_DEBUG-postProcessNetwork1--tTextureType"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-postProcessNetwork1--textureType"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera_DEBUG-events1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "lights--transform"?: ParamValueSerializedTypeMap["folder"];
  "lights--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "lights--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--t"?: ParamValueSerializedTypeMap["vector3"];
  "lights--t-tx"?: ParamValueSerializedTypeMap["float"];
  "lights--t-ty"?: ParamValueSerializedTypeMap["float"];
  "lights--t-tz"?: ParamValueSerializedTypeMap["float"];
  "lights--tx"?: ParamValueSerializedTypeMap["float"];
  "lights--ty"?: ParamValueSerializedTypeMap["float"];
  "lights--tz"?: ParamValueSerializedTypeMap["float"];
  "lights--r"?: ParamValueSerializedTypeMap["vector3"];
  "lights--r-rx"?: ParamValueSerializedTypeMap["float"];
  "lights--r-ry"?: ParamValueSerializedTypeMap["float"];
  "lights--r-rz"?: ParamValueSerializedTypeMap["float"];
  "lights--rx"?: ParamValueSerializedTypeMap["float"];
  "lights--ry"?: ParamValueSerializedTypeMap["float"];
  "lights--rz"?: ParamValueSerializedTypeMap["float"];
  "lights--s"?: ParamValueSerializedTypeMap["vector3"];
  "lights--s-sx"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sy"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sz"?: ParamValueSerializedTypeMap["float"];
  "lights--sx"?: ParamValueSerializedTypeMap["float"];
  "lights--sy"?: ParamValueSerializedTypeMap["float"];
  "lights--sz"?: ParamValueSerializedTypeMap["float"];
  "lights--scale"?: ParamValueSerializedTypeMap["float"];
  "lights--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "lights--display"?: ParamValueSerializedTypeMap["boolean"];
  "lights--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights-hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "lights-hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--center"?: ParamValueSerializedTypeMap["vector3"];
  "lights-polarTransform1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--longitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--latitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--depth"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--color"?: ParamValueSerializedTypeMap["color"];
  "lights-spotLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--angle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--penumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--decay"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--distance"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-spotLight1--shadow"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "lights-spotLight1--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRadius"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volumetric"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--tvolumetric"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--volAttenuation"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volAnglePower"?: ParamValueSerializedTypeMap["float"];
  "camera--transform"?: ParamValueSerializedTypeMap["folder"];
  "camera--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "camera--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "camera--t"?: ParamValueSerializedTypeMap["vector3"];
  "camera--t-tx"?: ParamValueSerializedTypeMap["float"];
  "camera--t-ty"?: ParamValueSerializedTypeMap["float"];
  "camera--t-tz"?: ParamValueSerializedTypeMap["float"];
  "camera--tx"?: ParamValueSerializedTypeMap["float"];
  "camera--ty"?: ParamValueSerializedTypeMap["float"];
  "camera--tz"?: ParamValueSerializedTypeMap["float"];
  "camera--r"?: ParamValueSerializedTypeMap["vector3"];
  "camera--r-rx"?: ParamValueSerializedTypeMap["float"];
  "camera--r-ry"?: ParamValueSerializedTypeMap["float"];
  "camera--r-rz"?: ParamValueSerializedTypeMap["float"];
  "camera--rx"?: ParamValueSerializedTypeMap["float"];
  "camera--ry"?: ParamValueSerializedTypeMap["float"];
  "camera--rz"?: ParamValueSerializedTypeMap["float"];
  "camera--s"?: ParamValueSerializedTypeMap["vector3"];
  "camera--s-sx"?: ParamValueSerializedTypeMap["float"];
  "camera--s-sy"?: ParamValueSerializedTypeMap["float"];
  "camera--s-sz"?: ParamValueSerializedTypeMap["float"];
  "camera--sx"?: ParamValueSerializedTypeMap["float"];
  "camera--sy"?: ParamValueSerializedTypeMap["float"];
  "camera--sz"?: ParamValueSerializedTypeMap["float"];
  "camera--scale"?: ParamValueSerializedTypeMap["float"];
  "camera--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "camera--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "camera--display"?: ParamValueSerializedTypeMap["boolean"];
  "camera--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "camera-box1--size"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--sizes"?: ParamValueSerializedTypeMap["vector3"];
  "camera-box1--sizes-sizesx"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--sizes-sizesy"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--sizes-sizesz"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--sizesx"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--sizesy"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--sizesz"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--divisions"?: ParamValueSerializedTypeMap["integer"];
  "camera-box1--center"?: ParamValueSerializedTypeMap["vector3"];
  "camera-box1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--centerx"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--centery"?: ParamValueSerializedTypeMap["float"];
  "camera-box1--centerz"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraFrameMode1--frameMode"?: ParamValueSerializedTypeMap["integer"];
  "camera-cameraFrameMode1--expectedAspectRatio"?: ParamValueSerializedTypeMap["float"];
  "camera-hierarchy1--mode"?: ParamValueSerializedTypeMap["integer"];
  "camera-hierarchy1--levels"?: ParamValueSerializedTypeMap["integer"];
  "camera-hierarchy1--objectMask"?: ParamValueSerializedTypeMap["string"];
  "camera-hierarchy1--addChildMode"?: ParamValueSerializedTypeMap["integer"];
  "camera-perspectiveCamera_MAIN--fov"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--near"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--far"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--position"?: ParamValueSerializedTypeMap["vector3"];
  "camera-perspectiveCamera_MAIN--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--positionx"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--positiony"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--positionz"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "camera-perspectiveCamera_MAIN--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--rotationx"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--rotationy"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--rotationz"?: ParamValueSerializedTypeMap["float"];
  "camera-perspectiveCamera_MAIN--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "camera-perspectiveCamera_MAIN--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "camera-perspectiveCamera_MAIN--name"?: ParamValueSerializedTypeMap["string"];
  "camera-perspectiveCamera_MAIN--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "camera-actor1--useThisNode"?: ParamValueSerializedTypeMap["boolean"];
  "camera-actor1--node"?: ParamValueSerializedTypeMap["node_path"];
  "camera-actor1-add1--add0"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-add1--add0-add0x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add0-add0y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add0-add0z"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add0x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add0y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add0z"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add1"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-add1--add1-add1x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add1-add1y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add1-add1z"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add1x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add1y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-add1--add1z"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-floatToVec3_2--x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-floatToVec3_2--y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-floatToVec3_2--z"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-mult1--mult0"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-mult1--mult1"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-mult2--mult0"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-mult2--mult1"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-multScalar1--value"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-multScalar1--value-valuex"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-multScalar1--value-valuey"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-multScalar1--value-valuez"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-multScalar1--valuex"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-multScalar1--valuey"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-multScalar1--valuez"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-multScalar1--mult"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-plane1--normal"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-plane1--normal-normalx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-plane1--normal-normaly"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-plane1--normal-normalz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-plane1--normalx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-plane1--normaly"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-plane1--normalz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-plane1--constant"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-rayFromCursor1--element"?: ParamValueSerializedTypeMap["integer"];
  "camera-actor1-setObjectLookAt1--targetPosition"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-setObjectLookAt1--targetPosition-targetPositionx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--targetPosition-targetPositiony"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--targetPosition-targetPositionz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--targetPositionx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--targetPositiony"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--targetPositionz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--up"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-setObjectLookAt1--up-upx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--up-upy"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--up-upz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--upx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--upy"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--upz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--lerp"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectLookAt1--invertDirection"?: ParamValueSerializedTypeMap["boolean"];
  "camera-actor1-setObjectLookAt1--updateMatrix"?: ParamValueSerializedTypeMap["boolean"];
  "camera-actor1-setObjectPosition1--position"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-setObjectPosition1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectPosition1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectPosition1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectPosition1--positionx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectPosition1--positiony"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectPosition1--positionz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectPosition1--lerp"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectPosition1--updateMatrix"?: ParamValueSerializedTypeMap["boolean"];
  "camera-actor1-setObjectRotation1--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-setObjectRotation1--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectRotation1--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectRotation1--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectRotation1--rotationx"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectRotation1--rotationy"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectRotation1--rotationz"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectRotation1--lerp"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-setObjectRotation1--updateMatrix"?: ParamValueSerializedTypeMap["boolean"];
  "camera-actor1-vec3ToFloat1--vec3"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-vec3ToFloat1--vec3-vec3x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat1--vec3-vec3y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat1--vec3-vec3z"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat1--vec3x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat1--vec3y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat1--vec3z"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat2--vec3"?: ParamValueSerializedTypeMap["vector3"];
  "camera-actor1-vec3ToFloat2--vec3-vec3x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat2--vec3-vec3y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat2--vec3-vec3z"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat2--vec3x"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat2--vec3y"?: ParamValueSerializedTypeMap["float"];
  "camera-actor1-vec3ToFloat2--vec3z"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1--node"?: ParamValueSerializedTypeMap["node_path"];
  "camera-cameraControls1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "camera-cameraControls1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "camera-cameraControls1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "camera-cameraControls1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "camera-cameraControls1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "camera-cameraControls1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "camera-cameraControls1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "camera-cameraControls1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "camera-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "camera-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "camera-cameraControls1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "camera-cameraControls1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "camera-cameraControls1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "camera-cameraControls1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "rhino--transform"?: ParamValueSerializedTypeMap["folder"];
  "rhino--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "rhino--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "rhino--t"?: ParamValueSerializedTypeMap["vector3"];
  "rhino--t-tx"?: ParamValueSerializedTypeMap["float"];
  "rhino--t-ty"?: ParamValueSerializedTypeMap["float"];
  "rhino--t-tz"?: ParamValueSerializedTypeMap["float"];
  "rhino--tx"?: ParamValueSerializedTypeMap["float"];
  "rhino--ty"?: ParamValueSerializedTypeMap["float"];
  "rhino--tz"?: ParamValueSerializedTypeMap["float"];
  "rhino--r"?: ParamValueSerializedTypeMap["vector3"];
  "rhino--r-rx"?: ParamValueSerializedTypeMap["float"];
  "rhino--r-ry"?: ParamValueSerializedTypeMap["float"];
  "rhino--r-rz"?: ParamValueSerializedTypeMap["float"];
  "rhino--rx"?: ParamValueSerializedTypeMap["float"];
  "rhino--ry"?: ParamValueSerializedTypeMap["float"];
  "rhino--rz"?: ParamValueSerializedTypeMap["float"];
  "rhino--s"?: ParamValueSerializedTypeMap["vector3"];
  "rhino--s-sx"?: ParamValueSerializedTypeMap["float"];
  "rhino--s-sy"?: ParamValueSerializedTypeMap["float"];
  "rhino--s-sz"?: ParamValueSerializedTypeMap["float"];
  "rhino--sx"?: ParamValueSerializedTypeMap["float"];
  "rhino--sy"?: ParamValueSerializedTypeMap["float"];
  "rhino--sz"?: ParamValueSerializedTypeMap["float"];
  "rhino--scale"?: ParamValueSerializedTypeMap["float"];
  "rhino--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "rhino--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "rhino--display"?: ParamValueSerializedTypeMap["boolean"];
  "rhino--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "rhino-fileGLTF1--url"?: ParamValueSerializedTypeMap["string"];
  "rhino-fileGLTF1--draco"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-fileGLTF1--ktx2"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-fileGLTF1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-fileGLTF1--reload"?: ParamValueSerializedTypeMap["button"];
  "rhino-hierarchy1--mode"?: ParamValueSerializedTypeMap["integer"];
  "rhino-hierarchy1--levels"?: ParamValueSerializedTypeMap["integer"];
  "rhino-hierarchy1--objectMask"?: ParamValueSerializedTypeMap["string"];
  "rhino-hierarchy1--addChildMode"?: ParamValueSerializedTypeMap["integer"];
  "rhino-material1--group"?: ParamValueSerializedTypeMap["string"];
  "rhino-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-material1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "rhino-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "rhino-objectProperties1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--tname"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--name"?: ParamValueSerializedTypeMap["string"];
  "rhino-objectProperties1--trenderOrder"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "rhino-objectProperties1--tfrustumCulled"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--frustumCulled"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--tmatrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--tvisible"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--visible"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--tcastShadow"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--treceiveShadow"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-objectProperties1--receiveShadow"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--default"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshStandard1--color"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshStandard1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--colorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--colorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--colorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useVertexColors"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--opacity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--textures"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshStandard1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--map"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--emissive"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshStandard1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshStandard1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "rhino-MAT-meshStandard1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--metalness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshStandard1--roughness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshStandard1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--front"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--blending"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshStandard1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshStandard1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshStandard1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshStandard1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshStandard1--wireframeLinecap"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshStandard1--wireframeLinejoin"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshStandard1--useFog"?: ParamValueSerializedTypeMap["boolean"];
}
